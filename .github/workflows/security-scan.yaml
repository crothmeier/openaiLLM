name: Security Scan

on:
  push:
    branches: [main, develop, "feat/*"]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Monday

permissions:
  contents: read
  security-events: write

jobs:
  bandit:
    name: Bandit Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true  # Non-blocking initially
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install bandit
      run: pip install bandit[toml]
    
    - name: Run bandit scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt || true
    
    - name: Upload bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-results
        path: bandit-report.json

  safety:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    continue-on-error: true  # Non-blocking initially
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install pip-audit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run pip-audit
      run: |
        pip-audit --desc --format json --output pip-audit-report.json || true
        pip-audit --desc || true
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check || true
    
    - name: Upload security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-scan-results
        path: |
          pip-audit-report.json
          safety-report.json

  semgrep:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/python
          p/owasp-top-ten
    
  trivy:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  gitleaks:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}